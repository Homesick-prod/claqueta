'use client';

import { Download, FileText } from 'lucide-react';
import { useState } from 'react';
import { CallSheetPage } from '../model';

interface ExportPDFButtonProps {
  page: CallSheetPage;
  projectName: string;
}

export default function ExportPDFButton({ page, projectName }: ExportPDFButtonProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [pdfSupported, setPdfSupported] = useState(true);

  const handleExportPDF = async () => {
    try {
      setIsExporting(true);
      
      // Check if @react-pdf/renderer is available
      const reactPdf = await import('@react-pdf/renderer').catch(() => null);
      
      if (!reactPdf) {
        // Fallback: Generate basic text export
        generateTextExport();
        return;
      }

      // Dynamic import of the PDF document component
      const { default: CallsheetDocument } = await import('../pdf/CallsheetDocument');
      
      // Generate PDF
      const blob = await reactPdf.pdf(
        CallsheetDocument({ page, projectName })
      ).toBlob();
      
      // Download the PDF
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${projectName}_${page.title}_callsheet.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('PDF export failed:', error);
      setPdfSupported(false);
      generateTextExport();
    } finally {
      setIsExporting(false);
    }
  };

  const generateTextExport = () => {
    const formatDate = (dateISO?: string) => {
      if (!dateISO) return 'TBD';
      return new Date(dateISO).toLocaleDateString();
    };

    const formatTime = (time?: string) => time || '--:--';

    let content = `CALL SHEET - ${projectName}\n`;
    content += `${page.title}\n`;
    content += `${'='.repeat(50)}\n\n`;
    
    // Basic Info
    content += `Date: ${formatDate(page.dateISO)}\n`;
    if (page.dayNumber) content += `Day: ${page.dayNumber}\n`;
    if (page.company) content += `Company: ${page.company}\n`;
    content += `Crew Call: ${formatTime(page.crewCall)}\n\n`;
    
    // Location
    if (page.location?.name) {
      content += `LOCATION\n`;
      content += `${'-'.repeat(20)}\n`;
      content += `${page.location.name}\n`;
      if (page.location.address) content += `${page.location.address}\n`;
      content += '\n';
    }
    
    // Weather
    if (page.weather?.summary) {
      content += `WEATHER\n`;
      content += `${'-'.repeat(20)}\n`;
      content += `${page.weather.summary}\n`;
      if (page.weather.tempC) content += `Temperature: ${page.weather.tempC}Â°C\n`;
      if (page.weather.sunrise) content += `Sunrise: ${page.weather.sunrise}\n`;
      if (page.weather.sunset) content += `Sunset: ${page.weather.sunset}\n`;
      content += '\n';
    }
    
    // Cast
    if (page.castCalls.length > 0) {
      content += `CAST\n`;
      content += `${'-'.repeat(20)}\n`;
      page.castCalls.forEach(cast => {
        content += `${cast.name || 'TBD'} (${cast.character || 'Character'})\n`;
        content += `  Call: ${formatTime(cast.callTime)}\n`;
        if (cast.muTime) content += `  MU: ${formatTime(cast.muTime)}\n`;
        if (cast.wrTime) content += `  WR: ${formatTime(cast.wrTime)}\n`;
        if (cast.pickup) content += `  Pickup: ${cast.pickup}\n`;
        if (cast.notes) content += `  Notes: ${cast.notes}\n`;
        content += '\n';
      });
    }
    
    // Crew
    if (page.crewByDept.length > 0) {
      content += `CREW\n`;
      content += `${'-'.repeat(20)}\n`;
      page.crewByDept.forEach(dept => {
        const deptName = dept.deptId.toUpperCase();
        content += `${deptName}`;
        if (dept.deptCall) content += ` (Call: ${dept.deptCall})`;
        content += '\n';
        
        dept.members.forEach(member => {
          content += `  ${member.name || 'TBD'}`;
          if (member.position) content += ` - ${member.position}`;
          if (member.callTime) content += ` (${member.callTime})`;
          content += '\n';
        });
        content += '\n';
      });
    }
    
    // Notes
    if (page.unitNotes) {
      content += `UNIT NOTES\n`;
      content += `${'-'.repeat(20)}\n`;
      content += `${page.unitNotes}\n\n`;
    }
    
    if (page.safety) {
      content += `SAFETY\n`;
      content += `${'-'.repeat(20)}\n`;
      content += `${page.safety}\n\n`;
    }
    
    content += `Generated by Claqueta on ${new Date().toLocaleString()}\n`;
    
    // Download as text file
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${projectName}_${page.title}_callsheet.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <button
      onClick={handleExportPDF}
      disabled={isExporting}
      className="btn btn-secondary flex items-center gap-2"
    >
      {isExporting ? (
        <>
          <div className="w-4 h-4 border-2 border-[var(--text-muted)]/30 border-t-[var(--text-muted)] rounded-full animate-spin" />
          Exporting...
        </>
      ) : (
        <>
          <Download className="w-4 h-4" />
          Export {pdfSupported ? 'PDF' : 'TXT'}
        </>
      )}
    </button>
  );
}